syntax = "proto3";
package lrmrpb;

import "gogoproto/gogo.proto";
import "google/protobuf/empty.proto";
import "lrdd/row.proto";
import "internal/pbtypes/types.proto";

service Node {
    rpc CreateTasks (CreateTasksRequest) returns (google.protobuf.Empty);
    rpc PushData (stream PushDataRequest) returns (google.protobuf.Empty);
    rpc PollData (stream PollDataRequest) returns (stream PollDataResponse);
}

message CreateTasksRequest {
    pbtypes.JSON job = 1;
    string stage = 2;
    repeated string partitionIDs = 3;

    repeated Input input = 4;
    Output output = 5;
    map<string, bytes> broadcasts = 6;
}

message Job {
    string id = 1;
    string name = 2;
}

message Input {
    enum Type {
        PUSH = 0;
        POLL = 1;
    }
    Type type = 1;
}

message Output {
    enum Type {
        PUSH = 0;
        POLL = 1;
    }
    Type type = 1;

    // partitionKeyToHost contains an ordered mapping of partition key to output hostname.
    map<string, string> partitionToHost = 2;
}

message HostMapping {
    string host = 1;
    string taskID = 2;
}

message CreateTaskResponse {
    string taskID = 1;
}

// PushDataRequest is a request to push data for a worker to process.
// metadata with key "header" and value of DataHeader is required.
message PushDataRequest {
    repeated lrdd.Row data = 1;
}

// PollDataRequest is a request to poll data for a worker to process.
// metadata with key "header" and value of DataHeader is required.
message PollDataRequest {
    // N is maximum number of the data returned.
    int64 n = 1;
}

message PollDataResponse {
    repeated lrdd.Row data = 1;
}

message DataHeader {
    string taskID = 1;
    string fromHost = 2;
}
