syntax = "proto3";
package lrmrpb;

import "gogoproto/gogo.proto";
import "google/protobuf/empty.proto";

service Worker {
    rpc CreateTask (CreateTaskRequest) returns (CreateTaskResponse);
    rpc RunTask (stream RunRequest) returns (google.protobuf.Empty);
}

message CreateTaskRequest {
    Stage stage = 1;
    Output output = 2;
    map<string, bytes> broadcasts = 3;
}

message Stage {
    string jobID = 1;
    string name = 2;
    string runnerName = 3;
}

message Output {
    reserved 1;

    // shards contains an ordered mapping of output hostname to its task ID.
    repeated HostMapping shards = 2;

    Partitioner partitioner = 3;
}

message Partitioner {
    enum Type {
        NONE = 0;

        // HashPartitioner will determine output shard of the partition
        // by calculating `hash(partitionKey) modulo shardCount.`
        HASH_KEY = 1;

        // FiniteKeyPartitioner assigns partition keys to each shard and
        // will send an output partition to its designated shard.
        FINITE_KEY = 2;
    }
    Type type = 1;

    // PartitionKeyToHost contains mapping of partition key to worker node host.
    // Used only when the type is FINITE_KEY.
    map<string, string> keyToHost = 3;
}

message HostMapping {
    string host = 1;
    string taskID = 2;
}

message CreateTaskResponse {
    string taskID = 1;
}

message RunRequest {
    Node from = 1;
    string taskID = 2;
    repeated bytes inputs = 3;
}

message Node {
    string host = 1;
    string ID = 2;
}
